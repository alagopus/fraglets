/*
 * Trader.java
 * Copyright (C) 2002 Klaus Rennecke.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

package net.sourceforge.fraglets.mtgo.trader;

import javax.swing.JOptionPane;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import java.io.File;
import javax.swing.JInternalFrame;
import java.io.IOException;
import java.awt.BorderLayout;
import javax.swing.RepaintManager;
import org.xml.sax.SAXParseException;
import javax.swing.JFrame;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import java.net.URL;
import javax.swing.ImageIcon;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Graphics;
import javax.swing.JPanel;
import java.awt.MediaTracker;
import javax.swing.table.TableModel;
import javax.swing.JList;
import java.util.Iterator;
import java.net.URLConnection;

/**
 *
 * @author marion@users.sourceforge.net
 */
public class Trader extends JFrame {
    public static final String ABOUT_MESSAGE =
    "MGT Trader (C) Copyright 2002 Klaus Rennecke\n" +
    "\n" +
    "This program is free software; you can redistribute it and/or modify\n" +
    "it under the terms of the GNU General Public License as published by\n" +
    "the Free Software Foundation; either version 2 of the License, or\n" +
    "(at your option) any later version.\n" +
    "\n" +
    "This program is distributed in the hope that it will be useful,\n" +
    "but WITHOUT ANY WARRANTY; without even the implied warranty of\n" +
    "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n" +
    "GNU General Public License for more details.\n" +
    "\n" +
    "You should have received a copy of the GNU General Public License\n" +
    "along with this program; if not, write to the Free Software\n" +
    "Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.";
    
    /** The shared file chooser. */
    protected JFileChooser chooser;
    
    /** The shared card detective. */
    protected CardDetective detective;
    
    /** Creates new form Trader */
    public Trader() {
        initComponents();
        setSize(600, 400);
        detective = new CardDetective(null);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        desktopPane = new javax.swing.JDesktopPane();
        propertyPanel = new javax.swing.JPanel();
        cardPanel = new CardPanel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openSetMenuItem = new javax.swing.JMenuItem();
        openCDLMenuItem = new javax.swing.JMenuItem();
        openPDLMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();
        licenseItem = new javax.swing.JMenuItem();

        setTitle("MTGO Trader");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        getContentPane().add(desktopPane, java.awt.BorderLayout.CENTER);

        cardPanel.setMaximumSize(new java.awt.Dimension(200, 285));
        cardPanel.setMinimumSize(new java.awt.Dimension(200, 285));
        cardPanel.setPreferredSize(new java.awt.Dimension(200, 285));
        propertyPanel.add(cardPanel);

        getContentPane().add(propertyPanel, java.awt.BorderLayout.WEST);

        fileMenu.setText("File");
        openSetMenuItem.setText("Open Set ...");
        openSetMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openSetMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(openSetMenuItem);
        openCDLMenuItem.setText("Open comma delimited ...");
        openCDLMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openCDLMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(openCDLMenuItem);
        openPDLMenuItem.setText("Open pipe delimited ...");
        openPDLMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openPDLMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(openPDLMenuItem);
        fileMenu.add(jSeparator1);
        saveMenuItem.setText("Save");
        saveMenuItem.setEnabled(false);
        fileMenu.add(saveMenuItem);
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setEnabled(false);
        fileMenu.add(saveAsMenuItem);
        fileMenu.add(jSeparator2);
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exitMenuItem);
        menuBar.add(fileMenu);
        editMenu.setText("Edit");
        cutMenuItem.setText("Cut");
        cutMenuItem.setEnabled(false);
        editMenu.add(cutMenuItem);
        copyMenuItem.setText("Copy");
        copyMenuItem.setEnabled(false);
        editMenu.add(copyMenuItem);
        pasteMenuItem.setText("Paste");
        pasteMenuItem.setEnabled(false);
        editMenu.add(pasteMenuItem);
        deleteMenuItem.setText("Delete");
        deleteMenuItem.setEnabled(false);
        editMenu.add(deleteMenuItem);
        menuBar.add(editMenu);
        helpMenu.setText("Help");
        contentMenuItem.setText("Contents");
        contentMenuItem.setEnabled(false);
        helpMenu.add(contentMenuItem);
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });

        helpMenu.add(aboutMenuItem);
        licenseItem.setText("License ...");
        licenseItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                licenseItemActionPerformed(evt);
            }
        });

        helpMenu.add(licenseItem);
        menuBar.add(helpMenu);
        setJMenuBar(menuBar);

        pack();
    }//GEN-END:initComponents

    private void openSetMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openSetMenuItemActionPerformed
        // Add your handling code here:
        Object result = JOptionPane.showInternalInputDialog(desktopPane,
            "Select Set:", "Open Set", JOptionPane.PLAIN_MESSAGE, null,
            detective.getSetList(), null);
        if (result != null) {
            try {
                String name = result.toString();
                final DefaultTableModel model = new DefaultTableModel();
                SpoilerParser parser = new SpoilerParser(model);
                parser.parse(detective.openURL(detective.getSet(name)));
                openTable(name, model);
            } catch (IOException ex) {
                showException("opening set", ex);
            }
        }
    }//GEN-LAST:event_openSetMenuItemActionPerformed

    private void openPDLMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openPDLMenuItemActionPerformed
        // Add your handling code here:
        if (chooser == null) {
            chooser = new JFileChooser();
        }
        chooser.setFileSelectionMode(chooser.FILES_ONLY);
        if (chooser.APPROVE_OPTION == chooser.showOpenDialog(this)) {
            File file = chooser.getSelectedFile();
            if (file != null) {
                try {
                    final DefaultTableModel model = new DefaultTableModel();
                    PDLParser parser = new PDLParser(model);
                    parser.parse(chooser.getSelectedFile());
                    openTable(file.getName(), model);
                } catch (IOException ex) {
                    showException("opening file", ex);
                }
            }
        }
    }//GEN-LAST:event_openPDLMenuItemActionPerformed

    private void licenseItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_licenseItemActionPerformed
        try {
            javax.swing.JEditorPane editorPane =
                new javax.swing.JEditorPane(getClass().getResource("gpl.txt"));
            editorPane.setEditable(false);
            javax.swing.JScrollPane scrollPane =
                new javax.swing.JScrollPane(editorPane);
            scrollPane.setPreferredSize(new java.awt.Dimension(600, 250));
            javax.swing.JOptionPane.showInternalMessageDialog(desktopPane,
                scrollPane, "License",
                javax.swing.JOptionPane.INFORMATION_MESSAGE);
        } catch (java.io.IOException ex) {
            showException("reading license", ex);
        }
    }//GEN-LAST:event_licenseItemActionPerformed

    private void openCDLMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openCDLMenuItemActionPerformed
        // Add your handling code here:
        if (chooser == null) {
            chooser = new JFileChooser();
        }
        chooser.setFileSelectionMode(chooser.FILES_ONLY);
        if (chooser.APPROVE_OPTION == chooser.showOpenDialog(this)) {
            File file = chooser.getSelectedFile();
            if (file != null) {
                try {
                    final DefaultTableModel model = new DefaultTableModel();
                    CDLParser parser = new CDLParser(model);
                    parser.parse(chooser.getSelectedFile());
                    openTable(file.getName(), model);
                } catch (IOException ex) {
                    showException("opening file", ex);
                }
            }
        }
    }//GEN-LAST:event_openCDLMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // Add your handling code here:
        JOptionPane.showInternalMessageDialog(desktopPane, ABOUT_MESSAGE);
    }//GEN-LAST:event_aboutMenuItemActionPerformed
    
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    protected void openTable(String name, final TableModel model) {
        final PriceTable table = new PriceTable(model);
        JInternalFrame frame = new JInternalFrame(name, true, true, true, true);
        frame.getContentPane().setLayout(new BorderLayout());
        frame.getContentPane().add(table, BorderLayout.CENTER);
        frame.pack();
        frame.show();
        desktopPane.add(frame);
        frame.toFront();
        table.setModel(model);
        table.getTable().getSelectionModel()
            .addListSelectionListener(new ListSelectionListener() {
                public void valueChanged(ListSelectionEvent e) {
                    if (!e.getValueIsAdjusting()) {
                        int index = table.getTable().getSelectedRow();
                        if (index < 0) {
                            ((CardPanel)cardPanel).setImage(null);
                            return;
                        }
                        String value = model
                            .getValueAt(index, 0).toString();
                        URL imageURL = detective.getImageURL(value);
                        if (imageURL != null) {
                            ((CardPanel)cardPanel).setImage(imageURL);
                        } else {
                            ((CardPanel)cardPanel).setImage(null);
                        }
                    }
                }
        });
    }
    
    protected void showException(String operation, Throwable ex) {
        String message = ex.getLocalizedMessage();
        if (message == null) {
            message = ex.toString();
        }
        if (ex instanceof SAXParseException) {
            SAXParseException spe = (SAXParseException)ex;
            message += "(" + spe.getSystemId()
                + " line " + spe.getLineNumber() + ")";
        }
        JOptionPane.showInternalMessageDialog
            (desktopPane, message, "Exception "+operation, JOptionPane.ERROR_MESSAGE);
        RepaintManager.currentManager(this)
            .markCompletelyDirty(getRootPane());
    }
    
    public class CardPanel extends JPanel {
        protected Image image;
        protected MediaTracker tracker = new MediaTracker(this);
        
        public void setImage(URL source) {
            image = null;
            if (source != null) {
                image = this.getToolkit().getImage(source);
                Dimension size = this.getSize();
                tracker.addImage(image, 0, size.width, size.height);
                tracker.statusAll(true);
            }
            this.repaint();
        }
        
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            if (image != null) {
                Dimension size = this.getSize();
                g.setPaintMode();
                g.drawImage(image, 0, 0, size.width, size.height, this);
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new Trader().show();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenuItem licenseItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openCDLMenuItem;
    private javax.swing.JPanel propertyPanel;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenuItem contentMenuItem;
    private javax.swing.JMenuItem openSetMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JPanel cardPanel;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem openPDLMenuItem;
    // End of variables declaration//GEN-END:variables
    
}
