#
# $Id: javadepend,v 1.2 2000-04-29 11:21:46 marion Exp $
# 
# javadepend.sh - Simplistic dependencies generator for java.
# Jul 24 1997 by marion
# (C) Copyright 1997,1998 Klaus Rennecke (marion@users.sourceforge.net)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
# 
# Log: javadepend.sh,v 
# After 1.2  1998/01/23 10:30  kre
# Added -rooted option.
#
# Revision 1.2  1997/07/25 12:16:08  kre
# *** empty log message ***
#
# Revision 1.1  1997/07/24 01:08:42  kre
#
#

# This algorithm is quite kludgy, but works surprisingly well.  You
# will need GNU CC to use this.  The only cases I am aware of where
# this program erroneously diagnoses a dependency is when using the
# same identifier for instance variables or methods as for a class
# also in scope.  Since I try to avoid such atrocities, this is of no
# real consequence for me.  Note that, in a way, these files are
# anyway dependent on the class, since the ambiguity resolution is
# influenced by the mere existence of that class.  Don't think I'm
# splitting virtual hairs here, products having that problem include
# ANTLR 2.0 and BISS-AWT.
#
# Using the C++ preprocessor on all files at once makes the process
# lightning fast.  We need that preprocessor, since references in
# comments or strings shall not count as dependencies.
#
# Usage: javadepend files.java ...
#
# All files not in the current directory are only listed as dependencies,
# never as targets. Thus you can just use
#
#	./javadepend *.java ../package/*.java > depend
#
# to include dependencies on classes from PACKAGE without making them
# targets of the current package directory.  Do not use '../*/*.java',
# since that will use the local package sources twice, besides being
# dangerous and inaccurate.  I consider stating imported packages
# explicitly much better style.
#
# If you just want to include all given files in targets, use the
# --rooted option.
#
# This script is not intended to be read by humans. I have not made any
# attempt at obfuscating the code, despite appearances. Maybe the fact
# that GNU gcc cannot -imacros from a pipe is lucky, since i would have
# used _one_ pipe instead of three if it could. That would eliminate the
# need for a temporary file.

prefix=''
rooted=false
usage="usage: $0 [--rooted] [--prefix=<directory prefix>]
    --help		Show usage information.
    --rooted		Invocation from pakage root, include all given classes.
    --prefix <dir>	Prepend <dir> to targets and dependencies.
";

while [ $# -gt 0 ]; do
    case "$1" in
	--prefix)
	    shift
	    prefix="$1";;
	--prefix=*)
	    prefix="`IFS='='; set -- $1; shift; echo -n $* | 
		    sed -e 's;[/\\\\];\\\\&;g'`";;
	--rooted)
	    rooted=true;;
	--help)
	    echo -n "$usage" && exit 0;;
	*)
	    break;;
    esac
    shift
done

f0="<DEPEND "
f1='"\([^"]*\)\.java" "\([^"]*\)"'
f2=">"
x0="#define "
x1=" ${f0}__FILE__ \""
x2="\"${f2}"
nl='\
'

tmpdef=/tmp/javadepend.$$
trap "rm -f $tmpdef" 0 1 2 15

ls "$@" |
  sed -e "s/^\([^/]*\)\.java\$/$x0\1$x1\1$x2/" \
      -e "s/^\(.*\)\/\([^/]*\)\.java\$/$x0\2$x1\1\/\2$x2/" > $tmpdef

if "$rooted"; then
	src=`ls "$@"`
else
	src=`ls "$@" | grep -v "/"`
fi

if [ -z "$src" ]; then
	echo "$0: No targets, consider using the --rooted option" 1>&2
	exit 1
fi

gcc -x c++ -P -E -imacros $tmpdef $src |
  sed -n \
	-e ': start' \
	-e '/</!b' \
	-e "s/^[^<]*$f0$f1$f2/$prefix\1.class: $prefix\2.class$nl/" \
	-e 't put' \
	-e 's/^[^<]*<//' \
	-e 't start' \
	-e 'b' \
	-e ': put' \
	-e "/^\\([^:]*\\): \\1$nl/!P" \
	-e D \
  | sort -u

rm -f $tmpdef

