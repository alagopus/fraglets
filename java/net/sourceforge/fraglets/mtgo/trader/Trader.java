/*
 * Trader.java
 * Copyright (C) 2002 Klaus Rennecke.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

package net.sourceforge.fraglets.mtgo.trader;

import java.util.StringTokenizer;
import com.jclark.xml.sax.CommentDriver;
import org.xml.sax.SAXParseException;
import org.xml.sax.SAXException;
import org.xml.sax.InputSource;
import org.xml.sax.ErrorHandler;
import java.beans.PropertyVetoException;
import javax.swing.JScrollPane;

import javax.swing.JEditorPane;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.JOptionPane;
import javax.swing.JInternalFrame;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.JFrame;
import javax.swing.RepaintManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableColumn;
import com.jclark.xsl.sax.Destination;
import com.jclark.xsl.sax.OutputMethodHandlerImpl;
import com.jclark.xsl.sax.FileDestination;
import com.jclark.xsl.sax.XSLProcessor;
import com.jclark.xsl.sax.XSLProcessorImpl;
import java.io.FileWriter;
import java.io.File;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.IOException;
import java.io.Writer;
import java.io.PrintWriter;
import java.awt.Image;
import java.awt.Graphics;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.MediaTracker;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.net.URL;
import net.sourceforge.fraglets.mtgo.trader.Trader.CardPanel;
import javax.swing.Box;

/**
 *
 * @author marion@users.sourceforge.net
 */
public class Trader extends JFrame {
    public static final String ABOUT_MESSAGE =
    "MGT Trader (C) Copyright 2002 Sandra Rennecke and Klaus Rennecke.\n" +
    "Contains XP XML parser Copyright (c) 1997, 1998 James Clark, see XP License.\n" +
    "Contains XT XML transformer Copyright (c) 1998, 1999 James Clark, see XT License.\n" +
    "\n" +
    "This program is free software; you can redistribute it and/or modify\n" +
    "it under the terms of the GNU General Public License as published by\n" +
    "the Free Software Foundation; either version 2 of the License, or\n" +
    "(at your option) any later version.\n" +
    "\n" +
    "This program is distributed in the hope that it will be useful,\n" +
    "but WITHOUT ANY WARRANTY; without even the implied warranty of\n" +
    "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n" +
    "GNU General Public License for more details.\n" +
    "\n" +
    "You should have received a copy of the GNU General Public License\n" +
    "along with this program; if not, write to the Free Software\n" +
    "Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.";
    
    /** The shared file chooser. */
    protected JFileChooser chooser;
    
    /** The shared card detective. */
    protected CardDetective detective;
    
    /** The currently selected style. */
    protected URL selectedStyle;
    
    /** Creates new form Trader */
    public Trader() {
        initComponents();
        menuBar.add(Box.createHorizontalGlue());
        menuBar.add(styleStatusLabel);
        setSize(600, 400);
        detective = new CardDetective(null);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        styleStatusLabel = new javax.swing.JLabel();
        desktopPane = new javax.swing.JDesktopPane();
        propertyPanel = new javax.swing.JPanel();
        cardPanel = new CardPanel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openSetMenuItem = new javax.swing.JMenuItem();
        openCDLMenuItem = new javax.swing.JMenuItem();
        openPDLMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        exportHTMLMenuItem = new javax.swing.JMenuItem();
        exportXMLMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        exitMenuItem = new javax.swing.JMenuItem();
        optionsMenu = new javax.swing.JMenu();
        defaultStyleMenuItem = new javax.swing.JCheckBoxMenuItem();
        selectStyleMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        gnuLicenseItem = new javax.swing.JMenuItem();
        xpLicenseItem = new javax.swing.JMenuItem();
        xtLicenseItem = new javax.swing.JMenuItem();

        styleStatusLabel.setText("HTML Style: default");

        setTitle("MTGO Trader");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        getContentPane().add(desktopPane, java.awt.BorderLayout.CENTER);

        propertyPanel.setBorder(new javax.swing.border.TitledBorder("Card Information"));
        cardPanel.setMaximumSize(new java.awt.Dimension(200, 285));
        cardPanel.setMinimumSize(new java.awt.Dimension(200, 285));
        cardPanel.setPreferredSize(new java.awt.Dimension(200, 285));
        propertyPanel.add(cardPanel);

        getContentPane().add(propertyPanel, java.awt.BorderLayout.WEST);

        fileMenu.setText("File");
        openSetMenuItem.setText("Open Set ...");
        openSetMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openSetMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(openSetMenuItem);
        openCDLMenuItem.setText("Open comma delimited ...");
        openCDLMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openCDLMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(openCDLMenuItem);
        openPDLMenuItem.setText("Open pipe delimited ...");
        openPDLMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openPDLMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(openPDLMenuItem);
        fileMenu.add(jSeparator1);
        exportHTMLMenuItem.setText("Export HTML ...");
        exportHTMLMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportHTMLMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exportHTMLMenuItem);
        exportXMLMenuItem.setText("Export XML ...");
        exportXMLMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportXMLMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exportXMLMenuItem);
        fileMenu.add(jSeparator2);
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exitMenuItem);
        menuBar.add(fileMenu);
        optionsMenu.setText("Options");
        defaultStyleMenuItem.setSelected(true);
        defaultStyleMenuItem.setText("Default style");
        defaultStyleMenuItem.setToolTipText("Use default style for HTML export");
        defaultStyleMenuItem.setEnabled(false);
        defaultStyleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultStyleMenuItemActionPerformed(evt);
            }
        });

        optionsMenu.add(defaultStyleMenuItem);
        selectStyleMenuItem.setText("Select style ...");
        selectStyleMenuItem.setToolTipText("Select a custom style for HTML export");
        selectStyleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectStyleMenuItemActionPerformed(evt);
            }
        });

        optionsMenu.add(selectStyleMenuItem);
        menuBar.add(optionsMenu);
        helpMenu.setText("Help");
        contentMenuItem.setText("Contents");
        contentMenuItem.setEnabled(false);
        helpMenu.add(contentMenuItem);
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });

        helpMenu.add(aboutMenuItem);
        helpMenu.add(jSeparator3);
        gnuLicenseItem.setText("GNU License");
        gnuLicenseItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gnuLicenseItemActionPerformed(evt);
            }
        });

        helpMenu.add(gnuLicenseItem);
        xpLicenseItem.setText("XP License");
        xpLicenseItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xpLicenseItemActionPerformed(evt);
            }
        });

        helpMenu.add(xpLicenseItem);
        xtLicenseItem.setText("XT License");
        xtLicenseItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xtLicenseItemActionPerformed(evt);
            }
        });

        helpMenu.add(xtLicenseItem);
        menuBar.add(helpMenu);
        setJMenuBar(menuBar);

        pack();
    }//GEN-END:initComponents

    private void defaultStyleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultStyleMenuItemActionPerformed
        // Add your handling code here:
        if (defaultStyleMenuItem.isSelected()) {
            styleStatusLabel.setText("HTML Style: default");
        } else {
            String name = selectedStyle.getFile();
            int slash = name.lastIndexOf('/');
            if (slash >= 0) {
                name = name.substring(slash+1);
            }
            styleStatusLabel.setText("HTML Style: "+name);
        }
    }//GEN-LAST:event_defaultStyleMenuItemActionPerformed

    private void selectStyleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectStyleMenuItemActionPerformed
        if (chooser == null) {
            chooser = new JFileChooser();
        }
        chooser.setApproveButtonText("Select");
        chooser.setDialogTitle("Select HTML export style");
        chooser.setFileSelectionMode(chooser.FILES_ONLY);
        if (chooser.APPROVE_OPTION == chooser.showOpenDialog(this)) {
            File file = chooser.getSelectedFile();
            if (file != null && file.exists()) {
                try {
                    URL newStyle = file.toURL();
                    loadStyle(newStyle); // check for errors, and load
                    selectedStyle = newStyle;
                    defaultStyleMenuItem.setEnabled(true);
                    defaultStyleMenuItem.setSelected(false);
                    defaultStyleMenuItemActionPerformed(null);
                } catch (Exception ex) {
                    showException("selecting style", ex);
                }
            }
        }
    }//GEN-LAST:event_selectStyleMenuItemActionPerformed

    private void exportXMLMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportXMLMenuItemActionPerformed
        exportCurrentTable("Export XML", ".xml", null);
    }//GEN-LAST:event_exportXMLMenuItemActionPerformed

    private void exportHTMLMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportHTMLMenuItemActionPerformed
        URL style = selectedStyle;
        if (style == null || defaultStyleMenuItem.isSelected()) {
            style = getClass().getResource("table.xsl");
        }
        exportCurrentTable("Export HTML", ".html", style);
    }//GEN-LAST:event_exportHTMLMenuItemActionPerformed

    private void xtLicenseItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xtLicenseItemActionPerformed
        showTextResource("copying_xt.txt", "XT License");
    }//GEN-LAST:event_xtLicenseItemActionPerformed

    private void xpLicenseItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xpLicenseItemActionPerformed
        showTextResource("copying_xp.txt", "XP License");
    }//GEN-LAST:event_xpLicenseItemActionPerformed

    private void openSetMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openSetMenuItemActionPerformed
        // Add your handling code here:
        Object result = JOptionPane.showInternalInputDialog(desktopPane,
            "Select Set:", "Open Set", JOptionPane.PLAIN_MESSAGE, null,
            detective.getSetList(), null);
        if (result != null) {
            try {
                String name = result.toString();
                final DefaultTableModel model = new DefaultTableModel();
                SpoilerParser parser = new SpoilerParser(model);
                parser.parse(detective.openURL(detective.getSet(name)));
                openTable(name, model);
            } catch (IOException ex) {
                showException("opening set", ex);
            }
        }
    }//GEN-LAST:event_openSetMenuItemActionPerformed

    private void openPDLMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openPDLMenuItemActionPerformed
        if (chooser == null) {
            chooser = new JFileChooser();
        }
        chooser.setApproveButtonText("Import");
        chooser.setDialogTitle("Import Pipe (|) delimited table");
        chooser.setFileSelectionMode(chooser.FILES_ONLY);
        if (chooser.APPROVE_OPTION == chooser.showOpenDialog(this)) {
            File file = chooser.getSelectedFile();
            if (file != null) {
                try {
                    final DefaultTableModel model = new DefaultTableModel();
                    PDLParser parser = new PDLParser(model);
                    parser.parse(chooser.getSelectedFile());
                    openTable(file.getName(), model);
                } catch (IOException ex) {
                    showException("opening file", ex);
                }
            }
        }
    }//GEN-LAST:event_openPDLMenuItemActionPerformed

    private void gnuLicenseItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gnuLicenseItemActionPerformed
        showTextResource("gpl.txt", "MTGO Trader License");
    }//GEN-LAST:event_gnuLicenseItemActionPerformed

    private void openCDLMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openCDLMenuItemActionPerformed
        // Add your handling code here:
        if (chooser == null) {
            chooser = new JFileChooser();
        }
        chooser.setApproveButtonText("Import");
        chooser.setDialogTitle("Import comma delimited table");
        chooser.setFileSelectionMode(chooser.FILES_ONLY);
        if (chooser.APPROVE_OPTION == chooser.showOpenDialog(this)) {
            File file = chooser.getSelectedFile();
            if (file != null) {
                try {
                    final DefaultTableModel model = new DefaultTableModel();
                    CDLParser parser = new CDLParser(model);
                    parser.parse(chooser.getSelectedFile());
                    openTable(file.getName(), model);
                } catch (IOException ex) {
                    showException("opening file", ex);
                }
            }
        }
    }//GEN-LAST:event_openCDLMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // Add your handling code here:
        JOptionPane.showMessageDialog(this, ABOUT_MESSAGE);
    }//GEN-LAST:event_aboutMenuItemActionPerformed
    
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    protected void openTable(String name, TableModel model) {
        final PriceTable table = new PriceTable(model);
        JInternalFrame frame = new JInternalFrame(name, true, true, true, true);
        frame.getContentPane().setLayout(new BorderLayout());
        frame.getContentPane().add(table, BorderLayout.CENTER);
        frame.pack();
        frame.show();
        desktopPane.add(frame);
        frame.toFront();
        try {
            frame.setMaximum(true);
        } catch (PropertyVetoException ex) {
            // failed to maximize, ignore
        }
        table.setModel(model);
        table.getTable().getSelectionModel()
            .addListSelectionListener(new ListSelectionListener() {
                public void valueChanged(ListSelectionEvent e) {
                    if (!e.getValueIsAdjusting()) {
                        TableModel model = table.getModel();
                        int index = table.getTable().getSelectedRow();
                        if (index < 0) {
                            ((CardPanel)cardPanel).setImage(null);
                            return;
                        }
                        String value = model
                            .getValueAt(index, 0).toString();
                        URL imageURL = detective.getImageURL(value);
                        if (imageURL != null) {
                            ((CardPanel)cardPanel).setImage(imageURL);
                        } else {
                            ((CardPanel)cardPanel).setImage(null);
                        }
                    }
                }
        });
    }
    
    protected void showTextResource(String resource, String title) {
        showText(getClass().getResource(resource), title);
    }
    protected void showText(URL text, String title) {
        try {
            JEditorPane editorPane = new JEditorPane(text);
            editorPane.setEditable(false);
            JScrollPane scrollPane = new JScrollPane(editorPane);
            scrollPane.setPreferredSize(new Dimension(600, 250));
            JOptionPane.showMessageDialog(this,
                scrollPane, title,
                JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            showException("reading "+text, ex);
        }
    }
    
    protected void showException(String operation, Throwable ex) {
        String message = ex.getLocalizedMessage();
        if (message == null) {
            message = ex.toString();
        }
        if (ex instanceof SAXParseException) {
            SAXParseException spe = (SAXParseException)ex;
            message += "(" + spe.getSystemId()
                + " line " + spe.getLineNumber() + ")";
        }
        JOptionPane.showMessageDialog
            (this, message, "Exception "+operation, JOptionPane.ERROR_MESSAGE);
        RepaintManager.currentManager(this)
            .markCompletelyDirty(getRootPane());
    }
    
    public class CardPanel extends JPanel {
        protected Image image;
        protected MediaTracker tracker = new MediaTracker(this);
        
        public void setImage(URL source) {
            image = null;
            if (source != null) {
                image = this.getToolkit().getImage(source);
                Dimension size = this.getSize();
                tracker.addImage(image, 0, size.width, size.height);
                tracker.statusAll(true);
            }
            this.repaint();
        }
        
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            if (image != null) {
                Dimension size = this.getSize();
                g.setPaintMode();
                g.drawImage(image, 0, 0, size.width, size.height, this);
            }
        }
    }
    
    protected void exportCurrentTable(String dialogTitle, String postfix, URL style) {
        JTable table;
        String title;
        try {
            JInternalFrame selected = desktopPane.getSelectedFrame();
            table = ((PriceTable)selected.getContentPane().getComponent(0))
                .getTable();
            title = selected.getTitle();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                "Please select a table to export", "Export Failed",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (chooser == null) {
            chooser = new JFileChooser();
        }
        chooser.setApproveButtonText("Export");
        chooser.setDialogTitle(dialogTitle);
        chooser.setFileSelectionMode(chooser.FILES_ONLY);
        chooser.setSelectedFile(new File(title+postfix));
        if (chooser.APPROVE_OPTION == chooser.showSaveDialog(this)) {
            File file = chooser.getSelectedFile();
            if (!isWriteOK(file))
                return;
            writeTransformed(file, table, title, style);
        }
    }
        
    protected boolean isWriteOK(File file) {
        if (file == null) {
            return false;
        } else if (file.exists()) {
            return JOptionPane.OK_OPTION ==
                JOptionPane.showConfirmDialog
                    (this, "Overwrite "+file+"?", "Overwrite Confirmation",
                     JOptionPane.OK_CANCEL_OPTION);
        }
        return true;
    }
    
    protected XSLProcessor processor;
    protected OutputMethodHandlerImpl handler;
    protected URL loadedStyle;
    
    protected void initProcessor() {
        if (processor == null) {
            processor = new XSLProcessorImpl();
            processor.setParser(new CommentDriver());
            processor.setErrorHandler(new ErrorHandler() {
                public void warning(SAXParseException e) {
                    showException("XML transformation", e);
                }
                public void error(SAXParseException e) {
                    showException("XML transformation", e);
                }
                public void fatalError(SAXParseException e) throws SAXException {
                    throw e;
                }
            });
            handler = new OutputMethodHandlerImpl(processor);
            processor.setOutputMethodHandler(handler);
        }
    }
    
    protected void loadStyle(URL style) throws IOException, SAXException {
        initProcessor();
        if (loadedStyle == null || !loadedStyle.equals(style)) {
            InputStream xsl = style.openStream();
            processor.loadStylesheet(new InputSource(xsl));
            xsl.close();
            loadedStyle = style;
        }
    }
    
    /** Export the current roster to a HTML file.
     * @param file file to write the exported roster into
     */    
    protected void writeTransformed(File file, final JTable table, final String title, URL style) {
        try {
            if (style == null) {
                FileWriter fw = new FileWriter(file);
                writeXML(fw, table, title);
                fw.close();
                return;
            }
            loadStyle(style);
            Destination out = new FileDestination(file);
            handler.setDestination(out);
            final PipedWriter pw = new PipedWriter();
            new Thread() {
                public void run() {
                    try {
                        writeXML(pw, table, title);
                        pw.close();
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                }
            }.start();
            processor.parse(new InputSource(new PipedReader(pw)));
//            showText(file.toURL(), "HTML Export Result");
        } catch (Exception ex) {
            ex.printStackTrace();
            showException("XML transformation", ex);
        }
    }
    
    protected void writeXML(Writer out, JTable table, String title) throws IOException {
        PrintWriter pw = new PrintWriter(out);
        pw.println("<table title=\""+title+"\">");
        // create tag names
        TableColumnModel tcm = table.getColumnModel();
        int cols = tcm.getColumnCount();
        String tags[] = new String[cols];
        pw.println(" <heading>");
        for (int i = 0; i < cols; i++) {
            // HACK: we don't set identifiers explicitly yet,
            // so we use lower case header values.
            TableColumn column = tcm.getColumn(i);
            tags[i] = CardDetective.simpleName(column.getIdentifier().toString());
            pw.print("  <column id=\"");
            pw.print(tags[i]);
            pw.print("\">");
            pw.print(column.getHeaderValue());
            pw.println("</column>");
        }
        pw.println(" </heading>");
        
        // create XML
        int rows = table.getRowCount();
        for (int j = 0; j < rows; j++) {
            pw.println(" <row>");
            for (int i = 0; i < cols; i++) {
                pw.print("  <");
                pw.print(tags[i]);
                Object value = table.getValueAt(j, i);
                if (value != null) {
                    pw.print(">");
                    pw.print(pcdata(value.toString()));
                    pw.print("</");
                    pw.print(tags[i]);
                    pw.println(">");
                } else {
                    pw.println("/>");
                }
            }
            pw.println(" </row>");
        }
        pw.println("</table>");
        pw.flush();
    }
    
    /** Quote a string, ready to use in a #PCDATA section of XML
     * @param str the string to quote
     * @return the quoted string
     */
    public static String pcdata(String str) {
        StringBuffer buffer = new StringBuffer();
        StringTokenizer tok = new StringTokenizer(str, "&<>", true);
        while (tok.hasMoreTokens()) {
            String token = tok.nextToken();
            if (token.length() == 1) {
                switch(token.charAt(0)) {
                    case '<':
                        buffer.append("&lt;");
                        break;
                    case '>':
                        buffer.append("&gt;");
                        break;
                    case '&':
                        buffer.append("&amp;");
                        break;
                    default:
                        buffer.append(token);
                }
            } else {
                buffer.append(token);
            }
        }
        return buffer.toString();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
            // ignore
        }
        new Trader().show();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenuItem exportXMLMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openCDLMenuItem;
    private javax.swing.JLabel styleStatusLabel;
    private javax.swing.JPanel propertyPanel;
    private javax.swing.JMenuItem contentMenuItem;
    private javax.swing.JMenuItem openSetMenuItem;
    private javax.swing.JMenuItem gnuLicenseItem;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JCheckBoxMenuItem defaultStyleMenuItem;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JMenuItem xpLicenseItem;
    private javax.swing.JMenuItem xtLicenseItem;
    private javax.swing.JPanel cardPanel;
    private javax.swing.JMenuItem exportHTMLMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuItem selectStyleMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem openPDLMenuItem;
    // End of variables declaration//GEN-END:variables
    
}
