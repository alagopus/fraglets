/*
 * UpdateWizard.java
 * Copyright (C) 2002 Klaus Rennecke.
 * Created on December 2, 2002, 3:08 PM
 */

package net.sourceforge.fraglets.yaelp;

import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Window;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.io.Writer;
import java.text.MessageFormat;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Observable;
import java.util.Observer;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.ListSelectionModel;
import javax.swing.RepaintManager;
import javax.swing.SwingUtilities;
import javax.swing.border.LineBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import net.sourceforge.fraglets.yaelp.bean.AvatarCellRenderer;
import net.sourceforge.fraglets.yaelp.bean.RosterTableModel;
import net.sourceforge.fraglets.yaelp.model.Avatar;
import net.sourceforge.fraglets.yaelp.model.EqXMLParser;
import net.sourceforge.fraglets.yaelp.model.EqlogParser;
import net.sourceforge.fraglets.yaelp.model.Line;
import net.sourceforge.fraglets.yaelp.model.Recognizer;
import net.sourceforge.fraglets.yaelp.model.Tricks;
import org.xml.sax.Locator;

/**
 * A wizard component to walk through a roster update from log files.
 *
 * <p>This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * <p>This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * <p>You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 * @author  marion@users.sourceforge.net
 * @version $Revision: 1.8 $
 */
public class UpdateWizard extends javax.swing.JPanel implements Runnable, Observer, Comparator, ListSelectionListener {
    
    public static final String APPLICATION_NAME = "Yaelp Update Wizard";
    
    public static final String COPYRIGHT_CLAIM =
        "Copyright © 2001, 2002 Klaus Rennecke.\n" +
        "XML parser Copyright © 1997, 1998 James Clark.";

    static {
        try {
            javax.swing.UIManager.setLookAndFeel
                (javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
            // oh well ...
        }
    }
    
    /** Creates new form UpdateWizard */
    public UpdateWizard() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        javax.swing.JTextArea jTextArea2;
        javax.swing.JLabel mageloLabel;
        javax.swing.JLabel mainLabel;
        javax.swing.JButton browseButton;
        javax.swing.JTextArea jTextArea1;
        javax.swing.JPanel jPanel1;
        javax.swing.JPanel savePanel;
        javax.swing.JPanel buttonPanel;
        javax.swing.JPanel sendPanel;
        javax.swing.JPanel loadPanel;
        javax.swing.JLabel mailLabel;
        javax.swing.JScrollPane jScrollPane1;
        javax.swing.JLabel jLabel1;
        javax.swing.JLabel aaLabel;
        java.awt.GridBagConstraints gridBagConstraints;
        javax.swing.JLabel rankLabel;
        javax.swing.JLabel jLabel2;
        javax.swing.JScrollPane jScrollPane4;
        javax.swing.JLabel imLabel;
        javax.swing.JTextArea jTextArea3;
        javax.swing.JScrollPane jScrollPane2;
        javax.swing.JPanel parsePanel;
        javax.swing.JPanel introPanel;
        javax.swing.JButton exitButton;
        javax.swing.JPanel editPanel;
        javax.swing.JButton aboutButton;
        javax.swing.JScrollPane jScrollPane3;
        javax.swing.JButton browseButton1;

        chooser = new javax.swing.JFileChooser();
        defaultMargin = new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 4, 5, 4));
        blackBorder = new LineBorder(Color.black);
        tabPane = new javax.swing.JTabbedPane();
        introPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        loadPanel = new javax.swing.JPanel();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        loadChoice = new javax.swing.JComboBox();
        browseButton = new javax.swing.JButton();
        parsePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logfileList = new javax.swing.JList();
        editPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        rosterTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        mainLabel = new javax.swing.JLabel();
        mainField = new javax.swing.JTextField();
        aaLabel = new javax.swing.JLabel();
        aaField = new javax.swing.JTextField();
        rankLabel = new javax.swing.JLabel();
        rankChoice = new javax.swing.JComboBox();
        mineCheck = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        mageloLabel = new javax.swing.JLabel();
        mageloField = new javax.swing.JTextField();
        mailLabel = new javax.swing.JLabel();
        mailField = new javax.swing.JTextField();
        imLabel = new javax.swing.JLabel();
        imField = new javax.swing.JTextField();
        newButton = new javax.swing.JButton();
        savePanel = new javax.swing.JPanel();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        saveChoice = new javax.swing.JComboBox();
        browseButton1 = new javax.swing.JButton();
        sendPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        sendText = new javax.swing.JTextArea();
        progressBar = new javax.swing.JProgressBar();
        buttonPanel = new javax.swing.JPanel();
        aboutButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();

        chooser.setFileFilter(filter);

        setLayout(new java.awt.GridBagLayout());

        setBackground(java.awt.Color.darkGray);
        setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.EtchedBorder(), new javax.swing.border.EmptyBorder(new java.awt.Insets(0, 72, 0, 0))));
        setMinimumSize(new java.awt.Dimension(400, 180));
        setPreferredSize(new java.awt.Dimension(580, 360));
        tabPane.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        tabPane.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        tabPane.setEnabled(false);
        tabPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabPaneStateChanged(evt);
            }
        });

        introPanel.setLayout(new java.awt.BorderLayout(4, 5));

        introPanel.setBorder(new javax.swing.border.TitledBorder("Introduction"));
        jScrollPane2.setBorder(defaultMargin);
        jTextArea1.setBackground((java.awt.Color) javax.swing.UIManager.getDefaults().get("Panel.background"));
        jTextArea1.setFont(new java.awt.Font("Serif", 0, 14));
        jTextArea1.setLineWrap(true);
        jTextArea1.setText("This wizard will help you create an update for your guild's member roster.\n\nFirst, the previous character information will be loaded, if any. Then the parser will be used on some of your log files to extract recent information. After log files have been parsed, you can edit the information to add properties to characters or filter unwanted entries.\n\nStart by pressing Next >");
        jTextArea1.setWrapStyleWord(true);
        jScrollPane2.setViewportView(jTextArea1);

        introPanel.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        tabPane.addTab("Intro", introPanel);

        loadPanel.setLayout(new java.awt.GridBagLayout());

        loadPanel.setBorder(new javax.swing.border.TitledBorder("Load Existing Characters"));
        jTextArea2.setBackground((java.awt.Color) javax.swing.UIManager.getDefaults().get("Panel.background"));
        jTextArea2.setEditable(false);
        jTextArea2.setFont(new java.awt.Font("Serif", 0, 14));
        jTextArea2.setLineWrap(true);
        jTextArea2.setText("The last saved roster holds the information from previous runs. It is used to detect which information has to be updated.\n\nIf this is the first time you use this wizard, you probably don't have a saved roster and you can safely skip this step.");
        jTextArea2.setWrapStyleWord(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        loadPanel.add(jTextArea2, gridBagConstraints);

        jLabel1.setText("Select the roster to load:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        loadPanel.add(jLabel1, gridBagConstraints);

        loadChoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadChoiceActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        loadPanel.add(loadChoice, gridBagConstraints);

        browseButton.setText("Browse ...");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        loadPanel.add(browseButton, gridBagConstraints);

        tabPane.addTab("Load", loadPanel);

        parsePanel.setLayout(new java.awt.BorderLayout());

        parsePanel.setBorder(new javax.swing.border.TitledBorder("Parse New Logfiles"));
        logfileList.setToolTipText("Select the log files you want to parse.");
        jScrollPane1.setViewportView(logfileList);

        parsePanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        tabPane.addTab("Parse", parsePanel);

        editPanel.setLayout(new java.awt.BorderLayout());

        editPanel.setBorder(new javax.swing.border.TitledBorder("Edit Character Information"));
        jScrollPane3.setViewportView(rosterTable);

        editPanel.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        mainLabel.setLabelFor(mainField);
        mainLabel.setText("Main:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(mainLabel, gridBagConstraints);

        mainField.setColumns(8);
        mainField.setToolTipText("The main character name.");
        mainField.setEnabled(false);
        mainField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFieldActionPerformed(evt);
            }
        });

        mainField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                mainFieldFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        gridBagConstraints.weightx = 0.5;
        jPanel1.add(mainField, gridBagConstraints);

        aaLabel.setLabelFor(aaField);
        aaLabel.setText("AA:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(aaLabel, gridBagConstraints);

        aaField.setColumns(2);
        aaField.setToolTipText("Alternate Advancement points spent.");
        aaField.setEnabled(false);
        aaField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFieldActionPerformed(evt);
            }
        });

        aaField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                aaFieldFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        gridBagConstraints.weightx = 0.5;
        jPanel1.add(aaField, gridBagConstraints);

        rankLabel.setLabelFor(rankChoice);
        rankLabel.setText("Rank:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(rankLabel, gridBagConstraints);

        rankChoice.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "a regular member", "an officer", "leader", "retired" }));
        rankChoice.setEnabled(false);
        rankChoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rankChoiceActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jPanel1.add(rankChoice, gridBagConstraints);

        mineCheck.setText("Mine");
        mineCheck.setToolTipText("Check if this is one of your toons.");
        mineCheck.setEnabled(false);
        mineCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mineCheckActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jPanel1.add(mineCheck, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        mageloLabel.setLabelFor(mageloField);
        mageloLabel.setText("Magelo:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel2.add(mageloLabel, gridBagConstraints);

        mageloField.setColumns(8);
        mageloField.setToolTipText("Magelo profile number.");
        mageloField.setEnabled(false);
        mageloField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFieldActionPerformed(evt);
            }
        });

        mageloField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                mageloFieldFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(mageloField, gridBagConstraints);

        mailLabel.setLabelFor(mailField);
        mailLabel.setText("Email:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel2.add(mailLabel, gridBagConstraints);

        mailField.setColumns(8);
        mailField.setToolTipText("Email contact address");
        mailField.setEnabled(false);
        mailField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFieldActionPerformed(evt);
            }
        });

        mailField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                mailFieldFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(mailField, gridBagConstraints);

        imLabel.setLabelFor(imField);
        imLabel.setText("IM:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel2.add(imLabel, gridBagConstraints);

        imField.setColumns(4);
        imField.setToolTipText("Instant messenger handle, like ICQ or Yahoo");
        imField.setEnabled(false);
        imField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFieldActionPerformed(evt);
            }
        });

        imField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                imFieldFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(imField, gridBagConstraints);

        newButton.setText("New ...");
        newButton.setToolTipText("Create a new entry.");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jPanel2.add(newButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel1.add(jPanel2, gridBagConstraints);

        editPanel.add(jPanel1, java.awt.BorderLayout.SOUTH);

        tabPane.addTab("Edit", editPanel);

        savePanel.setLayout(new java.awt.GridBagLayout());

        savePanel.setBorder(new javax.swing.border.TitledBorder("Save Updated Characters"));
        jTextArea3.setBackground((java.awt.Color) javax.swing.UIManager.getDefaults().get("Panel.background"));
        jTextArea3.setEditable(false);
        jTextArea3.setFont(new java.awt.Font("Serif", 0, 14));
        jTextArea3.setLineWrap(true);
        jTextArea3.setText("The last saved roster holds the information from previous runs. It is used to detect which information has to be updated.\n\nIdeally you would select the file which was used in the Load step. If this is the first time you are using this wizard, a default file name is chosen for you.");
        jTextArea3.setWrapStyleWord(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        savePanel.add(jTextArea3, gridBagConstraints);

        jLabel2.setText("Select where to save the new roster:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        savePanel.add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        savePanel.add(saveChoice, gridBagConstraints);

        browseButton1.setText("Browse ...");
        browseButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        savePanel.add(browseButton1, gridBagConstraints);

        tabPane.addTab("Save", savePanel);

        sendPanel.setLayout(new java.awt.BorderLayout(4, 5));

        sendPanel.setBorder(new javax.swing.border.TitledBorder("Send Updated Characters"));
        jScrollPane4.setBorder(defaultMargin);
        sendText.setBackground((java.awt.Color) javax.swing.UIManager.getDefaults().get("Panel.background"));
        sendText.setEditable(false);
        sendText.setFont(new java.awt.Font("Serif", 0, 14));
        sendText.setLineWrap(true);
        sendText.setWrapStyleWord(true);
        jScrollPane4.setViewportView(sendText);

        sendPanel.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        tabPane.addTab("Send", sendPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        add(tabPane, gridBagConstraints);

        progressBar.setBackground(java.awt.Color.darkGray);
        progressBar.setFont(new java.awt.Font("Serif", 0, 10));
        progressBar.setString("");
        progressBar.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        add(progressBar, gridBagConstraints);

        buttonPanel.setLayout(new java.awt.GridLayout(1, 0, 5, 5));

        buttonPanel.setOpaque(false);
        aboutButton.setText("About ...");
        aboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(aboutButton);

        backButton.setLabel("< Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(backButton);

        nextButton.setText("Next >");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(nextButton);

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(exitButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        add(buttonPanel, gridBagConstraints);

    }//GEN-END:initComponents

    private void aaFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_aaFieldFocusLost
        // Add your handling code here:
        if (selectedAvatar != null) {
            updateProperty(selectedAvatar, "AA", aaField.getText());
        }
    }//GEN-LAST:event_aaFieldFocusLost

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        // Add your handling code here:
        String name = JOptionPane.showInputDialog
            (this, "Character name", "New Entry",
             JOptionPane.QUESTION_MESSAGE);
        if (name != null) {
            name = name.trim();
        }
        if (name != null && name.length() > 0) {
            Avatar roster[] = model.getRoster();
            Avatar probe = new Avatar(System.currentTimeMillis());
            probe.setName(Avatar.normalizeName(name));
            int index = Arrays.binarySearch(roster, probe, this);
            if (index < 0) {
                // new entry
                Avatar grow[] = new Avatar[roster.length + 1];
                System.arraycopy(roster, 0, grow, 1, roster.length);
                if (recognizer != null) {
                    Avatar old = recognizer.getAvatar(probe.getName());
                    if (old != null) {
                        probe = old; // use old entry
                    }
                }
                grow[0] = probe;
                model.setRoster(grow);
                roster = model.getRoster();
                index = Arrays.binarySearch(roster, probe, this);
            }
            if (index >= 0) {
                // select entry
                rosterTable.setRowSelectionInterval(index, index);
                rosterTable.scrollRectToVisible(rosterTable.getCellRect(index, 0, true));
            }
        }
    }//GEN-LAST:event_newButtonActionPerformed

    private void imFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_imFieldFocusLost
        // Add your handling code here:
        if (selectedAvatar != null) {
            updateProperty(selectedAvatar, "IM", imField.getText());
        }
    }//GEN-LAST:event_imFieldFocusLost

    private void inputFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFieldActionPerformed
        // Add your handling code here:
        Object source = evt.getSource();
        if (source instanceof Component) {
            ((Component)source).transferFocus();
        }
    }//GEN-LAST:event_inputFieldActionPerformed

    private void mineCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mineCheckActionPerformed
        // Add your handling code here:
        if (selectedAvatar != null) {
            Avatar avatar = selectedAvatar;
//            long now = System.currentTimeMillis();
            if (mineCheck.isSelected()) {
                updateProperty(avatar, "Login", "true");
            } else {
                updateProperty(avatar, "Login", "false");
            }
        }
    }//GEN-LAST:event_mineCheckActionPerformed

    private void rankChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rankChoiceActionPerformed
        // Add your handling code here:
        if (selectedAvatar != null) {
            updateProperty(selectedAvatar, "Rank",
                (String)rankChoice.getSelectedItem());
        }
    }//GEN-LAST:event_rankChoiceActionPerformed

    private void mageloFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mageloFieldFocusLost
        // Add your handling code here:
        if (selectedAvatar != null) {
            String value = mageloField.getText();
            int mark = value.lastIndexOf("num=");
            if (mark > 0) {
                int scan = mark = mark + "num=".length();
                int end = value.length();
                while (scan < end && Character.isDigit(value.charAt(scan)))
                    scan++;
                value = value.substring(mark, scan);
                mageloField.setText(value);
            }
            updateProperty(selectedAvatar, "Magelo", value);
        }
    }//GEN-LAST:event_mageloFieldFocusLost

    private void mailFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mailFieldFocusLost
        // Add your handling code here:
        if (selectedAvatar != null) {
            updateProperty(selectedAvatar, "Mail", mailField.getText());
        }
    }//GEN-LAST:event_mailFieldFocusLost

    private void mainFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mainFieldFocusLost
        // Add your handling code here:
        if (selectedAvatar != null) {
            String name = mainField.getText();
            if (name == null || name.length() == 0) {
                updateProperty(selectedAvatar, "Main", null);
            } else {
                Avatar roster[] = model.getRoster();
                Avatar probe = new Avatar(0);
                probe.setName(Avatar.normalizeName(name));
                int index = Arrays.binarySearch(roster, probe, this);
                if (index < 0) {
                    mainField.setText(null); // avoid loop
                    JOptionPane.showMessageDialog(this,
                        "Unknown character name: "+probe.getName(),
                        "Error setting main character", JOptionPane.ERROR_MESSAGE);
                } else {
                    updateProperty(selectedAvatar, "Main", probe.getName());
                }
            }
            mainField.setText(selectedAvatar.getProperty("Main"));
        }
    }//GEN-LAST:event_mainFieldFocusLost

    private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutButtonActionPerformed
        // Add your handling code here:
        JOptionPane.showMessageDialog(this,
            GPL.format(APPLICATION_NAME, COPYRIGHT_CLAIM),
            "About: "+APPLICATION_NAME,
            JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_aboutButtonActionPerformed

    private void browseButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButton1ActionPerformed
        // Add your handling code here:
        int answer = chooser.showSaveDialog(this);
        if (answer == chooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            if (file != null) {
                if (!file.getName().endsWith(".yxr")) {
                    file = new File(file.getParentFile(), file.getName()+".yxr");
                }
                saveChoice.addItem(file);
                saveChoice.setSelectedItem(file);
            }
        }
    }//GEN-LAST:event_browseButton1ActionPerformed

    private void loadChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadChoiceActionPerformed
        // Add your handling code here:
        recognizer = null;
    }//GEN-LAST:event_loadChoiceActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        // Add your handling code here:
        int answer = chooser.showOpenDialog(this);
        if (answer == chooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            if (file != null && file.exists()) {
                loadChoice.addItem(file);
                loadChoice.setSelectedItem(file);
                recognizer = null;
            }
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void tabPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabPaneStateChanged
        // Add your handling code here:
        int index = tabPane.getSelectedIndex();
        if (backButton != null) {
            backButton.setEnabled(index > 0);
        }
        if (nextButton != null) {
            nextButton.setEnabled(index + 1 < tabPane.getTabCount());
        }
        switch (index) {
            case 1:
                initLoadChoice();
                break;
            case 2:
                initLogfileList();
                break;
            case 3:
                initRosterTable();
                break;
            case 4:
                initSaveChoice();
                break;
            case 5:
                initSendText();
                break;
        }
    }//GEN-LAST:event_tabPaneStateChanged

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        tabPane.setSelectedIndex(tabPane.getSelectedIndex() - 1);
    }//GEN-LAST:event_backButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        int index = tabPane.getSelectedIndex();
        switch (index) {
            case 1:
            case 2:
            case 4:
                nextButton.setEnabled(false);
                this.state = index;
                animationThread.interrupt();
                break;
            default:
                tabPane.setSelectedIndex(index + 1);
                break;
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // Add your handling code here:
        Window window = SwingUtilities.getWindowAncestor(this);
        if (window != null) {
            window.dispose();
        }
    }//GEN-LAST:event_exitButtonActionPerformed

    private void initLoadChoice() {
        if (defaultRoster == null) {
            File files[] = chooser.getCurrentDirectory().listFiles(filter);
            File last = null;
            long time = 0;
            int scan = files.length;
            while (--scan >= 0) {
                if (files[scan].lastModified() > time) {
                    last = files[scan];
                    time = last.lastModified();
                }
            }
            if (last != null) {
                defaultRoster = last;
            } else {
                defaultRoster = new File(chooser.getCurrentDirectory(), "default.yxr");
            }
        }
        if (loadChoice.getModel().getSize() == 0) {
            loadChoice.addItem("<none>");
            if (defaultRoster.exists()) {
                loadChoice.addItem(defaultRoster);
                loadChoice.setSelectedItem(defaultRoster);
            }
        }
    }
    
    private void initLogfileList() {
        if (logfileList.getModel().getSize() == 0) {
            File installation = Tricks.findInstallation();
            File logs[] = installation.listFiles(new java.io.FileFilter() {
                public boolean accept(File file) {
                    String name = file.getName();
                    return name.startsWith("eqlog_") && name.endsWith(".txt")
                        && Character.isDigit(name.charAt(name.length() - 5));
                }
            });
            DefaultListModel model = new DefaultListModel();
            model.ensureCapacity(logs.length);
            File last = null;
            long time = 0L;
            for (int i = 0; i < logs.length; i++) {
                if (logs[i].lastModified() > time) {
                    last = logs[i];
                    time = last.lastModified();
                }
                model.addElement(logs[i]);
            }
            logfileList.setModel(model);
            if (last != null) {
                String match = last.getName();
                int mark = match.lastIndexOf('_');
                if (mark != -1) {
                    match = match.substring(mark);
                    for (int i = 0; i < logs.length; i++) {
                        if (logs[i].getName().endsWith(match)) {
                            logfileList.addSelectionInterval(i, i);
                        }
                    }
                }
            }
        }
    }
    
    private void initRosterTable() {
        if (recognizer != null) {
            Avatar avatars[] = recognizer.getAvatars();
            int scan = avatars.length;
            HashSet guilds = new HashSet();
            while (--scan >= 0) {
                if (isTrue(avatars[scan].getProperty("Login"))) {
                    Avatar.Guild guild = avatars[scan].getGuild();
                    if (guild == null) continue;
                    String name = guild.getName();
                    if (name.length() > 0 && !name.equals("-")) {
                        guilds.add(guild.getName());
                    }
                }
            }
            Avatar search[] = new Avatar[avatars.length];
            System.arraycopy(avatars, 0, search, 0, search.length);
            Arrays.sort(search, this);
            Avatar probe = new Avatar(0);
            int start = 0;
            for (scan = 0; scan < avatars.length; scan++) {
                if (!accept(avatars[scan], guilds)) {
                    String name = avatars[scan].getProperty("Main");
                    if (name == null) continue;
                    probe.setName(name);
                    int index = Arrays.binarySearch(search, probe, this);
                    if (index < 0) continue;
                    if (!accept(search[index], guilds)) continue;
                }
                if (start == scan) {
                    start += 1;
                } else {
                    avatars[start++] = avatars[scan];
                }
            }
            if (start < avatars.length) {
                Avatar shrink[] = new Avatar[start];
                System.arraycopy(avatars, 0, shrink, 0, start);
                avatars = shrink;
            }
            model = new RosterTableModel(avatars) {
                public int getColumnCount() {
                    return super.getColumnCount() - 2;
                }
            };
            model.setOrder(this);
            rosterTable.setModel(model);
            rosterTable.setDefaultRenderer(Object.class, new AvatarCellRenderer());
            rosterTable.doLayout();
            ListSelectionModel lsm = rosterTable.getSelectionModel();
            lsm.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            lsm.addListSelectionListener(this);
            
            initEditor(Avatar.Class.class, Avatar.Class.getValues());
            initEditor(Avatar.Culture.class, Avatar.Culture.getValues());
            initEditor(Avatar.Guild.class, Avatar.Guild.getValues());
            
            rosterTable.getColumn("Level").setPreferredWidth(20);
            rosterTable.getColumn("Guild").setPreferredWidth(120);
        }
    }
    
    protected static boolean accept(Avatar avatar, HashSet guilds) {
        Avatar.Guild now = avatar.getGuild();
        if (now != null && guilds.contains(now.getName())) return true;
        String ex = avatar.getProperty("EX");
        return ex != null && guilds.contains(ex);
    }
    
    protected void initEditor(Class editingClass, Collection values) {
        Object array[] = values.toArray();
        Arrays.sort(array);
        JComboBox selection = new JComboBox(array);
        selection.setBorder(blackBorder);
        selection.setEditable(true);
        selection.setFont(rosterTable.getFont());
        selection.setBackground(rosterTable.getBackground());
        Component c = selection.getEditor().getEditorComponent();
        if (c instanceof JComponent) {
            ((JComponent)c).setBorder(null);
        }
        rosterTable.setDefaultEditor(editingClass, new DefaultCellEditor(selection));
    }
    
    private void initSaveChoice() {
        if (saveChoice.getModel().getSize() == 0) {
            saveChoice.addItem("<none>");
        }
        Object selected = loadChoice.getSelectedItem();
        if (!(selected instanceof File)) {
            selected = defaultRoster;
        }
        saveChoice.setSelectedItem(selected);
        if (saveChoice.getSelectedItem() != selected) {
            saveChoice.addItem(selected);
            saveChoice.setSelectedItem(selected);
        }
    }
    
    private void initSendText() {
        String text = "Now launch your favorite email client"
            + " and send an email, with the file {0} attached, to your"
            + " guild representative in charge of keeping the member"
            + " lists up to date.";
        String name = saveChoice.getSelectedItem().toString();
        text = MessageFormat.format(text, new Object[]{name});
        sendText.setText(text);
        int mark = text.indexOf(name);
        if (mark != -1) {
            sendText.requestFocus();
            sendText.getCaret().setDot(mark);
            sendText.getCaret().moveDot(mark + name.length());
        }
    }
    
    private void loadRoster() {
        // Clear and allocate new roster
        recognizer = new Recognizer();
        recognizer.addObserver(this);
        // Load the saved roster
        Object selected = loadChoice.getSelectedItem();
        if (selected instanceof File) {
            try {
                progressInput = new FileInputStream((File)selected);
                progressInput = new BufferedInputStream(progressInput);
                progressBar.setString("Reading "+selected);
                progressBar.setMaximum(progressInput.available());
                InputStream in = progressInput;
                try {
                    in.mark(20); // actually need only 4
                    in = new GZIPInputStream(in);
                } catch (IOException ex) {
                    // apparently no compressed
                    in.reset();
                }
                recognizer.nextFile();
                EqXMLParser.parseFile(in, recognizer);
            } catch (Exception ex) {
                showException(ex);
            } finally {
                try { progressInput.close(); } catch (Exception ex) {}
                progressInput = null;
                progressBar.setString("");
                progressBar.setValue(0);
            }
        }
    }
    
    private void parseLogs() {
        Object files[] = logfileList.getSelectedValues();
        Line line = new Line();
        for (int i = 0; i < files.length; i++) {
            if (files[i] instanceof File) {
                if (recognizer == null) {
                    recognizer = new Recognizer();
                    recognizer.addObserver(this);
                }
                recognizer.nextFile();
                try {
                    progressInput = new FileInputStream((File)files[i]);
                    progressBar.setString("Reading "+files[i]);
                    progressBar.setMaximum(progressInput.available());
                    EqlogParser parser = new EqlogParser(new InputStreamReader(progressInput));
                    while (parser.readLine(line)) {
                        recognizer.parse(line);
                    }
                } catch (Exception ex) {
                    showException(ex);
                } finally {
                    try { progressInput.close(); } catch (Exception ex) {}
                    progressInput = null;
                    progressBar.setString("");
                    progressBar.setValue(0);
                }
            }
        }
    }
    
    private void saveRoster() {
        File file;
        Object selected = saveChoice.getSelectedItem();
        if (selected instanceof File) {
            file = (File)selected;
        } else {
            return;
        }
        try {
            progressBar.setString("Writing "+file);
            progressBar.setMaximum(model.getRowCount());
            progressBar.setValue(0);
            Writer out = new OutputStreamWriter
                (new GZIPOutputStream(new FileOutputStream(file)), "UTF-8");
            try {
                writeXML(out);
            } finally {
                out.close();
                progressBar.setString("");
                progressBar.setValue(0);
            }
        } catch (Exception ex) {
            showException(ex);
        }
    }
    
    protected void writeXML(java.io.Writer out) throws java.io.IOException {
        java.io.PrintWriter pw = new java.io.PrintWriter(out, false);
        pw.println("<roster title=\"Roster\">"); // FIXME: allow setting title
        // create tag names
        javax.swing.table.TableColumnModel header = rosterTable.getColumnModel();
        int cols = header.getColumnCount();
        String tags[] = new String[cols];
        pw.println(" <heading>");
        for (int i = 0; i < cols; i++) {
            // HACK: we don't set identifiers explicitly yet,
            // so we use lower case header values.
            javax.swing.table.TableColumn column = header.getColumn(i);
            tags[i] = column.getIdentifier().toString().toLowerCase();
            pw.print("  <column id=\"");
            pw.print(tags[i]);
            pw.print("\">");
            pw.print(column.getHeaderValue());
            pw.println("</column>");
        }
        pw.println(" </heading>");
        
        // create XML
        int rows = rosterTable.getRowCount();
        for (int j = 0; j < rows; j++) {
            if ((j & 15) == 0) {
                progressBar.setValue(j);
            }
            Avatar avatar = model.getAvatar(j);
            pw.print(" <avatar time=\"");
            pw.print(avatar.getTimestamp());
            pw.println("\">");
            for (int i = 0; i < cols; i++) {
                pw.print("  <");
                pw.print(tags[i]);
                if (tags[i].equals("guild")) {
                    pw.print(" time=\"");
                    pw.print(avatar.getGuildTimestamp());
                    pw.print('"');
                }
                Object value = rosterTable.getValueAt(j, i);
                if (value != null) {
                    pw.print(">");
                    pw.print(pcdata(value.toString()));
                    pw.print("</");
                    pw.print(tags[i]);
                    pw.println(">");
                } else {
                    pw.println("/>");
                }
            }
            Iterator i = avatar.getProperties();
            if (i != null) {
                while (i.hasNext()) {
                    Map.Entry entry = (Map.Entry)i.next();
                    Avatar.TimestampEntry value =
                        (Avatar.TimestampEntry)entry.getValue();
                    pw.print("  <property name=\"");
                    pw.print(entry.getKey());
                    pw.print("\" value=\"");
                    pw.print(quote(value.toString(), "&<>\""));
                    pw.print("\" time=\"");
                    pw.print(value.timestamp);
                    pw.println("\"/>");
                }
            }
            pw.println(" </avatar>");
        }
        pw.println("</roster>");
        pw.flush();
    }
    
    /** Quote a string, ready to use in a #PCDATA section of XML
     * @param str the string to quote
     * @return the quoted string
     */
    public static String pcdata(String str) {
        return quote(str, "&<>");
    }
    
    /** Quote a string, ready to use in a #PCDATA section of XML
     * @param str the string to quote
     * @param delim the delimiters to quote in the string
     * @return the quoted string
     */
    public static String quote(String str, String delim) {
        StringBuffer buffer = new StringBuffer();
        java.util.StringTokenizer tok = new java.util.StringTokenizer(str, delim, true);
        while (tok.hasMoreTokens()) {
            String token = tok.nextToken();
            if (token.length() == 1) {
                switch(token.charAt(0)) {
                    case '<':
                        buffer.append("&lt;");
                        break;
                    case '>':
                        buffer.append("&gt;");
                        break;
                    case '&':
                        buffer.append("&amp;");
                        break;
                    case '"':
                        buffer.append("&quot;");
                        break;
                    default:
                        buffer.append(token);
                }
            } else {
                buffer.append(token);
            }
        }
        return buffer.toString();
    }
    
    private void showException(Exception ex) {
        JOptionPane.showMessageDialog(this, ex.getLocalizedMessage(),
            ex.getClass().getName(), JOptionPane.ERROR_MESSAGE);
    }
    
    /** Paints this component.
     * <p>
     * This method is called when the contents of the component should
     * be painted; such as when the component is first being shown or
     * is damaged and in need of repair.  The clip rectangle in the
     * <code>Graphics</code> parameter is set to the area
     * which needs to be painted.
     * Subclasses of <code>Component</code> that override this
     * method need not call <code>super.paint(g)</code>.
     * <p>
     * For performance reasons, <code>Component</code>s with zero width
     * or height aren't considered to need painting when they are first shown,
     * and also aren't considered to need repair.
     * <p>
     * <b>Note</b>: For more information on the paint mechanisms utilitized
     * by AWT and Swing, including information on how to write the most
     * efficient painting code, see
     * <a href="http://java.sun.com/products/jfc/tsc/articles/painting/index.html">Painting in AWT and Swing</a>.
     *
     * @param g the graphics context to use for painting
     * @see       #update
     * @since     JDK1.0
     *
     */
    public void paint(Graphics g) {
        super.paint(g);
        if (animationFrame != null) {
            g.drawImage(animationFrame, 4, (getHeight() - 128) / 2, this);
        }
    }
    
    protected void initAnimation() {
        if (animation == null) {
            Image frameset;
            animation = new Image[10];
            frameset = Tricks.getImage(this, "0/cq`yhv");
            for (int i = 0; i < 8; i++) {
                Image frame = createImage(64, 128);
                Graphics g = frame.getGraphics();
                try {
                    int x = (i % 4) * 64;
                    int y = (i / 4) * 128;
                    g.drawImage(frameset, -x, -y, this);
                } finally {
                    g.dispose();
                }
                animation[i] = frame;
            }
            frameset = Tricks.getImage(this, "1/cq`yhv");
            for (int i = 0; i < 2; i++) {
                Image frame = createImage(64, 128);
                Graphics g = frame.getGraphics();
                try {
                    g.drawImage(frameset, i * -64, 0, this);
                } finally {
                    g.dispose();
                }
                animation[i + 8] = frame;
            }
        }
        if (animationThread == null || !animationThread.isAlive()) {
            animationThread = new Thread(this, "Plug-Animation");
            animationThread.setPriority(Thread.MIN_PRIORITY);
            animationThread.start();
        }
    }

    /** When an object implementing interface <code>Runnable</code> is used
     * to create a thread, starting the thread causes the object's
     * <code>run</code> method to be called in that separately executing
     * thread.
     * <p>
     * The general contract of the method <code>run</code> is that it may
     * take any action whatsoever.
     *
     * @see     java.lang.Thread#run()
     *
     */
    public void run() {
        try {
            int frame = 0;
            while (true) {
                animationFrame = animation[frame];
                repaint(4, (getHeight() - 128) / 2, 64, 128);
                try {
                    Thread.sleep(frame == 0 ? 4000 : 100);
                } catch (InterruptedException ex) {
                    int state = this.state;
                    this.state = 0;
                    switch (state) {
                        case 1:
                            loadRoster();
                            tabPane.setSelectedIndex(2);
                            break;
                        case 2:
                            parseLogs();
                            tabPane.setSelectedIndex(3);
                            break;
                        case 4:
                            saveRoster();
                            tabPane.setSelectedIndex(5);
                            break;
                        default:
                            throw ex;
                    }
                }
                frame = frame >= 9 ? 0 : frame + 1;
            }
        } catch (InterruptedException ex) {
        }
    }    
    
    /**
     * Makes this <code>Component</code> undisplayable by destroying it native
     * screen resource.
     * This method is called by the toolkit internally and should
     * not be called directly by programs.
     * @see       #isDisplayable
     * @see       #addNotify
     * @since JDK1.0
     *
     */
    public void removeNotify() {
        super.removeNotify();
        if (animationThread != null && animationThread.isAlive()) {
            animationThread.interrupt();
        }
    }
    
    /** Makes this <code>Component</code> displayable by connecting it to a
     * native screen resource.
     * This method is called internally by the toolkit and should
     * not be called directly by programs.
     * @see       #isDisplayable
     * @see       #removeNotify
     * @since JDK1.0
     *
     */
    public void addNotify() {
        super.addNotify();
        if (Tricks.findInstallation() != null) {
            initAnimation();
            tabPaneStateChanged(null);
        } else {
            tabPane.removeAll();
            tabPane.add("Error", new JTextArea("Your EverQuest installation directory could not be found."));
        }
    }
    
    public static void main(String args[]) {
        javax.swing.JFrame frame = new javax.swing.JFrame("Update Wizard");
        frame.setIconImage(frame.getToolkit()
            .getImage(UpdateWizard.class.getResource("logo.gif")));
        frame.setDefaultCloseOperation(frame.EXIT_ON_CLOSE);
        frame.getContentPane().add(new UpdateWizard());
        frame.pack();
        frame.show();
    }
    
    /** This method is called whenever the observed object is changed. An
     * application calls an <tt>Observable</tt> object's
     * <code>notifyObservers</code> method to have all the object's
     * observers notified of the change.
     *
     * @param   o     the observable object.
     * @param   arg   an argument passed to the <code>notifyObservers</code>
     *                 method.
     *
     */
    public void update(Observable o, Object arg) {
        try {
            if (progressInput instanceof InputStream) {
                progressBar.setValue(progressBar.getMaximum()
                    - ((InputStream)progressInput).available());
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            o.deleteObserver(this);
        }
    }
    
    /** Compares its two arguments for order.  Returns a negative integer,
     * zero, or a positive integer as the first argument is less than, equal
     * to, or greater than the second.<p>
     *
     * The implementor must ensure that <tt>sgn(compare(x, y)) ==
     * -sgn(compare(y, x))</tt> for all <tt>x</tt> and <tt>y</tt>.  (This
     * implies that <tt>compare(x, y)</tt> must throw an exception if and only
     * if <tt>compare(y, x)</tt> throws an exception.)<p>
     *
     * The implementor must also ensure that the relation is transitive:
     * <tt>((compare(x, y)&gt;0) &amp;&amp; (compare(y, z)&gt;0))</tt> implies
     * <tt>compare(x, z)&gt;0</tt>.<p>
     *
     * Finally, the implementer must ensure that <tt>compare(x, y)==0</tt>
     * implies that <tt>sgn(compare(x, z))==sgn(compare(y, z))</tt> for all
     * <tt>z</tt>.<p>
     *
     * It is generally the case, but <i>not</i> strictly required that
     * <tt>(compare(x, y)==0) == (x.equals(y))</tt>.  Generally speaking,
     * any comparator that violates this condition should clearly indicate
     * this fact.  The recommended language is "Note: this comparator
     * imposes orderings that are inconsistent with equals."
     *
     * @param o1 the first object to be compared.
     * @param o2 the second object to be compared.
     * @return a negative integer, zero, or a positive integer as the
     * 	       first argument is less than, equal to, or greater than the
     * 	       second.
     * @throws ClassCastException if the arguments' types prevent them from
     * 	       being compared by this Comparator.
     *
     */
    public int compare(Object a, Object b) {
        return ((Avatar)a).getName()
            .compareTo(((Avatar)b).getName());
    }
    
    public static boolean isTrue(String value) {
        return value != null && value.equals("true");
    }
    
    public static void updateProperty(Avatar avatar, String key, String value) {
        if (value != null && value.length() == 0) {
            value = null; // normalize
        }
        String current = avatar.getProperty(key);
        if (current == value) return;
        if (current == null || value == null || !current.equals(value)) {
//            System.err.println("updateProperty(..., "+key+", "+value+")");
            avatar.setProperty(key, value, System.currentTimeMillis());
        }
    }
    
    /**
     * Called whenever the value of the selection changes.
     * @param e the event that characterizes the change.
     *
     */
    public void valueChanged(ListSelectionEvent e) {
        if (e != null && e.getValueIsAdjusting()) return;
        int row = rosterTable.getSelectedRow();
        if (row < 0) {
            selectedAvatar = null;
            mainField.setEnabled(false);
            rankChoice.setEnabled(false);
            mineCheck.setEnabled(false);
            mageloField.setEnabled(false);
            mailField.setEnabled(false);
            imField.setEnabled(false);
            aaField.setEnabled(false);
        } else {
            Avatar avatar = selectedAvatar = model.getAvatar(row);
            mainField.setText(avatar.getProperty("Main"));
            mainField.setEnabled(true);
            rankChoice.setSelectedItem(avatar.getProperty("Rank"));
            rankChoice.setEnabled(true);
            mineCheck.setSelected(isTrue(avatar.getProperty("Login")));
            mineCheck.setEnabled(true);
            mageloField.setText(avatar.getProperty("Magelo"));
            mageloField.setEnabled(true);
            mailField.setText(avatar.getProperty("Mail"));
            mailField.setEnabled(true);
            imField.setText(avatar.getProperty("IM"));
            imField.setEnabled(true);
            aaField.setText(avatar.getProperty("AA"));
            aaField.setEnabled(true);
        }
    }
    
    private RosterTableModel model;
    private Avatar selectedAvatar;
    private Recognizer recognizer;
    
    private Image animation[];
    private Image animationFrame;
    private Thread animationThread;
    private int state;
    
    private Filter filter = new Filter();
    private File defaultRoster;
    private InputStream progressInput;
    
    public static class Filter extends javax.swing.filechooser.FileFilter
        implements java.io.FilenameFilter
    {

        /** Whether the given file is accepted by this filter.
         *
         */
        public boolean accept(File f) {
            return f.isDirectory() || accept(f.getParentFile(), f.getName());
        }

        /** Tests if a specified file should be included in a file list.
         *
         * @param   dir    the directory in which the file was found.
         * @param   name   the name of the file.
         * @return  <code>true</code> if and only if the name should be
         * included in the file list; <code>false</code> otherwise.
         *
         */
        public boolean accept(File dir, String name) {
            return name.endsWith(".yxr");
        }

        /** The description of this filter. For example: "JPG and GIF Images"
         * @see FileView#getName
         *
         */
        public String getDescription() {
            return "YAELP save files (*.yxr)";
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.border.LineBorder blackBorder;
    private javax.swing.JList logfileList;
    private javax.swing.JComboBox loadChoice;
    private javax.swing.JComboBox saveChoice;
    private javax.swing.JTextArea sendText;
    private javax.swing.JComboBox rankChoice;
    private javax.swing.JTextField mailField;
    private javax.swing.JTable rosterTable;
    private javax.swing.JFileChooser chooser;
    private javax.swing.JTextField imField;
    private javax.swing.JTabbedPane tabPane;
    private javax.swing.JTextField mageloField;
    private javax.swing.JButton newButton;
    private javax.swing.JButton backButton;
    private javax.swing.JCheckBox mineCheck;
    private javax.swing.JTextField aaField;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField mainField;
    private javax.swing.border.EmptyBorder defaultMargin;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton nextButton;
    // End of variables declaration//GEN-END:variables
    
}
